name: Generate Upstream Action

permissions:
  contents: write  # Provide write access to the repository contents

on:
  workflow_dispatch:
    inputs:
      upstream_name:
        description: 'Upstream name'
        required: true
        type: string
      upstream_uri:
        description: 'Upstream URI (e.g., api.example.com)'
        required: true
        type: string

jobs:
  update-manifest:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Git user
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

      - name: Create an empty branch
        id: create_branch
        run: |
          BRANCH_NAME="upstream-update-${{ github.run_id }}-${{ github.event.inputs.upstream_name }}"
          git checkout --orphan $BRANCH_NAME
          git rm -rf .
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Render Upstream manifest based on input
        id: render_manifest
        run: |
          UPSTREAM_NAME=${{ github.event.inputs.upstream_name }}
          UPSTREAM_URI=${{ github.event.inputs.upstream_uri }}

          FILE_PATH="routes/upstreams/${UPSTREAM_NAME}.yaml"
          mkdir -p routes/upstreams

          cat <<EOF > $FILE_PATH
          apiVersion: gloo.solo.io/v1
          kind: Upstream
          metadata:
            name: ${UPSTREAM_NAME}
            namespace: gloo-system
          spec:
            static:
              hosts:
                - addr: ${UPSTREAM_URI}
                  port: 443
            sslConfig: {}
          EOF

          echo "FILE_PATH=$FILE_PATH" >> $GITHUB_ENV
      
      - name: Commit and push changes
        run: |
          git add ${{ env.FILE_PATH }}
          git commit -m "Add new upstream for ${{ github.event.inputs.upstream_name }}"
          git push origin ${{ env.BRANCH_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge branch into main
        run: |
          git fetch origin main
          git checkout main
          git pull origin main
          git merge --allow-unrelated-histories --no-ff ${{ env.BRANCH_NAME }}
          git push origin main || (git pull --rebase origin main && git push origin main)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete branch after merge
        run: |
          git push origin --delete ${{ env.BRANCH_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
